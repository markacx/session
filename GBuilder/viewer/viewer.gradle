import net.ocie.javaone2015.build.fx.*
import net.ocie.javaone2015.build.validation.*
import org.gradle.api.GradleException

apply plugin: 'java'


task validate(description: 'Validate Build User') {
	doFirst {
		//this will open a SSH configuration dialog, in Pure JavaFX.
		//beacause Platform.exit() is the only way to return to the Gradle context
		//we cannot open further javafx dialogs.
		//uncomment out the below line to see this behavior
		//def pureFXConfigOutput = PureFXGetSSHInfo.openWindow("This is the initial config");
		
		//this limitation led us to develop a Swing wrapper for our JavaFX layout
		def fxmlURL = BuildValidationController.class.getResource("buildvalidation.fxml")
		def styleURL = BuildValidationController.class.getResource("buildvalidation.css")
		//we will pass in a string configuration object, and expect a ValidationResponse back
		def window = new FXPanelFrame<String, ValidationResponse>("Validation Config String", fxmlURL, styleURL);
		window.setExtraProperty("title", "Enter the windows keystore password");
		window.show();
		def val = window.getReturnValue();
		if (!val.isValid()) {
			throw new GradleException("Build canceled by user")
		}		
	}
}
task init_distribution << {
	distDir.mkdir()
}

task init_client (description: 'Create client sub jar tasks') {
	createClientTask('Module1',['com/rebuild/ext/module1/**'])
	createClientTask('Module2',['com/rebuild/ext/module2/**'])
	createClientTask('Module3',['com/rebuild/ext/module3/**'])
	createClientTask('Module4',['com/rebuild/ext/module4/**'])
	createClientTask('Module5',['com/rebuild/ext/module5/**'])

	tasks.each( {
			logger.info("Examining task " + it)
			if (it.group == 'client_sub_jar') {
				jar.dependsOn = jar.dependsOn + it 
				logger.info("Adding" + it)
			}
		}
	)
}
task init_server (description: 'Create server sub jar tasks') {
	createServerTask('Module1',['com/rebuild/ext/module1/**'])
	createServerTask('Module2',['com/rebuild/ext/module2/**'])
	createServerTask('Module3',['com/rebuild/ext/module3/**'])
	createServerTask('Module4',['com/rebuild/ext/module4/**'])
	createServerTask('Module5',['com/rebuild/ext/module5/**'])

	tasks.each( {
			logger.info("Examining task " + it)
			if (it.group == 'server_sub_jar') {
				jar.dependsOn = jar.dependsOn + it 
				logger.info("Adding" + it)
			}
		}
	)
}
compileJava {
	source "$projectBase/src"
	println "$projectBase/src"
	include '**/*.java'
}
processResources {
	from "$projectBase/src"

	exclude '**/*.java'
}
jar {
	archiveName = 'MyApp.jar'
	exclude 'dsi/ext/**'
}
task copyStuff(type: Copy) {
	destinationDir distDir
	from resourcesDir
	include 'README.txt'
	include 'picture.png'

	doLast {
		ant.fixcrlf (eol:"lf", srcdir : destinationDir, includes: 'README.txt')
	}
}
task makePackage (description : 'Put files in zip file', type: Zip, dependsOn: [jar,init_distribution,copyStuff]) {
	archiveName = "package.zip"
	def subTasks = tasks.matching( { task -> task.group == 'client_sub_jar' } )
	from (subTasks)
}
task rePackage_bad (description : 'Do something to the zip file', dependsOn: [makePackage]) << {
	def org = makePackage.outputs.getFiles()[0];
	org.renameTo(distDir)
} 
task rePackage_good (type : Copy, description : 'Do something to the zip file', dependsOn: [makePackage]) << {
	from makePackage.outputs
	into distDir
} 
task execJava (type: Exec, dependsOn : rePackage_good) {
	def file = new File(distDir,"version.txt").absoluteFile;

	executable = System.getProperty("java.home") + "/bin/java.exe"
	//The arguments are not considered part of the "inputs"  Add them explicitly if a change in them should re-run the task
	inputs.property('MyExecutable',executable)

	args "-version"
	//The arguments are not considered part of the "inputs"  Add them explicitly if a change in them should re-run the task
	inputs.property('MyArgs',args)
	errorOutput = new ByteArrayOutputStream()
	doLast {
		file.text = errorOutput.toString()
	}
	//Without setting an output, the task not have any output and so will run every time
	outputs.file(file)
}
task createDist (dependsOn: execJava) {
	
}

public void createClientTask(archive,dirs) {
	task([type: Jar, group : 'client_sub_jar', dependsOn:"compileJava"],"create_viewer_" + archive) {
		//Not sure why, but it is necessary to include the source set
		from sourceSets.main.output

		includes = dirs
		exclude "**/server/**"
		archiveName ="${archive}C.jar"
		artifacts {
			archives file: new File(buildDir,archiveName), name: archive, type: 'jar', classifier: 'extra'
		}
	}
	tasks.jar.dependsOn += "create_viewer_" + archive
}
public void createServerTask(archive,dirs) {
	task([type: Jar, group : 'server_sub_jar', dependsOn:"compileJava"],"create_server_" + archive) {
		//Not sure why, but it is necessary to include the source set
		from sourceSets.main.output

		includes = dirs
		exclude "**/client/**"
		archiveName ="${archive}S.jar"
		artifacts {
			archives file: new File(buildDir,archiveName), name: archive, type: 'jar', classifier: 'extra'
		}
	}
	tasks.jar.dependsOn += "create_server_" + archive
}