import net.ocie.javaone2015.build.fx.*
import net.ocie.javaone2015.build.validation.*
import org.gradle.api.GradleException

apply plugin: 'java'

task validate(description: 'Validate Build User') {
	doFirst {
		def fxmlURL = BuildValidationController.class.getResource("buildvalidation.fxml")
		def styleURL = BuildValidationController.class.getResource("buildvalidation.css")
		def window = new FXPanelFrame<String, String>("", fxmlURL, styleURL);
		window.setExtraProperty("title", "Enter the windows keystore password");
		window.show();
		def val = window.getReturnValue();
		if (val == null) {
			throw new GradleException("Build canceled by user")
		}		
	}
}
task init (description: 'Create client sub jar tasks') {
//	createTask('annotation',['dsi/ext/annotation/**'])
//	createTask('attachment',['dsi/ext/attachment/**'])
//	createTask('clientadmin',['dsi/ext/clientadmin/**'])
//	createTask('collate',['dsi/ext/collate/**'])
//	createTask('cutoffadmin',['dsi/ext/cutoffadmin/**'])
//	createTask('datamining',['dsi/ext/datamining1/**'])
//	createTask('datastore',['dsi/ext/datastore/**','dsi/ext/query/**'])
//	createTask('document',['dsi/ext/document/**','dsi/ext/document2/**','dsi/ext/storage/**','dsi/ext/search/**'])
//	createTask('documentadmin',['dsi/ext/documentadmin/**'])
//	createTask('editing',['dsi/ext/editing/**'])
//	createTask('foldering',['dsi/ext/foldering2/**'])
//	createTask('helpdesk',['dsi/ext/helpdesk/**'])
//	createTask('indexer',['dsi/ext/indexer/**'])
//	createTask('infidelity',['dsi/ext/infidelity/**'])
//	createTask('iv',['dsi/ext/iv/**'])
//	createTask('ivadmin',['dsi/ext/ivadmin/**'])
//	createTask('labeladmin',['dsi/ext/labeladmin/**'])
//	createTask('overlay',['dsi/ext/overlay/**'])
//	createTask('piv',['dsi/ext/piv/**'])
//	createTask('posting',['dsi/ext/posting/**'])
//	createTask('postingadmin',['dsi/ext/postingadmin/**'])
//	createTask('recon',['dsi/ext/recon/**'])
//	createTask('schemeadmin',['dsi/ext/schemeadmin/**'])
//	createTask('search',['dsi/ext/search/**'])
//	createTask('securityadmin',['dsi/ext/securityadmin/**'])
//	createTask('taskmanager',['dsi/ext/taskmanager2/**'])
//	createTask('textviewer',['dsi/ext/textviewer/**'])
//	createTask('totd',['dsi/ext/totd/**'])
//	createTask('vista',['dsi/ext/vista/**'])
//	createTask('vistaadmin',['dsi/ext/vistaadmin/**'])

	tasks.each( {
			logger.info("Examining task " + it)
			if (it.group == 'server_sub_jar') {
				jar.dependsOn = jar.dependsOn + it 
				logger.info("Adding" + it)
			}
		}
	)
}
compileJava {
	println "$projectBase/src"
	source "$projectBase/src"
	include 'dsi/branding/**/*.java'
	include 'dsi/app/javaViewer/**/*.java'
	include 'dsi/client/**/*.java'
	include 'dsi/core/**/*.java'
	include 'dsi/joint/**/*.java'
	
	include 'dsi/system/*/core/**/*.java'
	include 'dsi/system/*/client/**/*.java'
	include 'dsi/system/*/joint/**/*.java'
	
	include 'dsi/ext/*/core/**/*.java'
	include 'dsi/ext/*/client/**/*.java'
	include 'dsi/ext/*/joint/**/*.java'
}
processResources {
	from "$projectBase/src"

	include 'dsi/branding/**'
	include 'dsi/app/javaViewer/**'
	include 'dsi/client/**'
	include 'dsi/core/**'
	include 'dsi/joint/**'
	
	include 'dsi/system/*/core/**'
	include 'dsi/system/*/client/**'
	include 'dsi/system/*/joint/**'
	
	include 'dsi/ext/*/core/**'
	include 'dsi/ext/*/client/**'
	include 'dsi/ext/*/joint/**'
	
	exclude 'dsi/branding/resources/cornericon-512x512.png'
	exclude 'dsi/branding/resources/cornericon-1024x1024.png'
	exclude '**/*.java'

}
jar {
	archiveName = 'clientC.jar'
	exclude 'dsi/ext/**'
}
public void createTask(archive,dirs) {
	task([type: Jar, group : 'client_sub_jar', dependsOn:"compileJava"],"create_" + archive) {
		//Not sure why, but it is necessary to include the source set
		from sourceSets.main.output

		includes = dirs
		archiveName ="${archive}C.jar"
		artifacts {
			archives file: new File(buildDir,archiveName), name: archive, type: 'jar', classifier: 'extra'
		}
	}
	tasks.jar.dependsOn += "create_" + archive
}