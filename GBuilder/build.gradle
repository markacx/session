import org.gradle.api.Project
description = 'Root project'

logger.quiet("Java version of build: " + System.getProperty("java.version"))

File privateFile = new File(projectDir,'private.gradle')
if (privateFile.exists()) {
	apply from: 'private.gradle'
}

ext.myRootDirectory = new File(projectDir,'..').canonicalFile.absolutePath

if (!hasProperty('distributionBase')) {
	ext.distributionBase = new File(projectDir,'dist').canonicalFile.absolutePath
}
ext.isReleaseBuild = "true".equals(isReleaseBuildText.toLowerCase())
ext.resourcesDir = new File(projectDir,'resources')

apply from: 'lib-def.gradle'
if (!hasProperty('buildDate')) {
	ext.buildDate = new Date().format('MM/dd/yyyy HH:mm:ss')
}

logger.quiet "Base = ${distributionBase}"

subprojects {
	ext.distDir = new File(projectDir,'dist')
	ext.resourceDir = resourcesDir
	
	println "BASE: " + distDir
	println "resourceDir: " + resourceDir
	
	tasks.withType(JavaCompile) {
		options.incremental = true
		options.warnings = false
		options.deprecation = false
		options.fork = true;
		options.forkOptions.with {
			memoryMaximumSize = "512M"
		}
	}
	tasks.withType(Jar) {
		metaInf {
			from (resourcesDir) {
				include 'VERSION-INFO.txt'
			}
		}
		manifest {
			attributes (
				'ReleaseBuild': isReleaseBuild,
				//Having BuildDate-input in the config section will force this task run every time.  Instead, put it in doFirst section
				//'BuildDate-input': System.currentTimeMillis() 
			)
		}
		doFirst {
			//Doing this prevents a change in the build date from invalidating the jar file and triggering a rebuild
			manifest.attributes ('BuildDate': System.currentTimeMillis())
		}
	}

	afterEvaluate( { Project proj ->
		if (!proj.tasks.matching( {it.name == 'createDist'}).empty) {
			if (proj.tasks.matching( {it.name == 'copyToDistribution'}).empty) {
				proj.task([type: Copy, group : 'Distribution',dependsOn: ':'+proj.name + ':createDist'],"copyToDistribution") {
					destinationDir ( new File(distributionBase) )
					from (proj.distDir)
				}
			}
			rootProject.tasks['createDist'].dependsOn += proj.tasks['copyToDistribution']
		}
	})
}
task createDist (dependsOn: ":viewer:createDist") {
	//Do stuff here
}
project(':viewer') {
	ext.projectBase=myRootDirectory+'/Viewer'
}
project(':servlet') {
	ext.projectBase=myRootDirectory+'/Servlet'
}
